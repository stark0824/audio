// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: cp_user_internal.proto

package cp

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserInternalClient is the client API for UserInternal service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserInternalClient interface {
	Uid(ctx context.Context, in *UserInternalParams_Token, opts ...grpc.CallOption) (*UserInternalParams_Uid, error)
	Info(ctx context.Context, in *UserInternalParams_Token, opts ...grpc.CallOption) (*UserCommon_InfoUser, error)
	InfoFromUid(ctx context.Context, in *UserInternalParams_FromUidReq, opts ...grpc.CallOption) (*UserCommon_InfoUser, error)
	SimpleMap(ctx context.Context, in *UserInternalParams_UserIds, opts ...grpc.CallOption) (*UserInternalParams_SimpleUserMap, error)
	BasicMap(ctx context.Context, in *UserInternalParams_UserIds, opts ...grpc.CallOption) (*UserInternalParams_BasicUserMap, error)
	BindingInfo(ctx context.Context, in *UserInternalParams_Uid, opts ...grpc.CallOption) (*UserCommon_BindingInfo, error)
	// 检测是否被禁言
	CheckForbidTalk(ctx context.Context, in *UserInternalParams_CheckForbidTalk, opts ...grpc.CallOption) (*BooleanValue, error)
	// 昵称搜索，用户后台搜索， limit 100
	SearchNickname(ctx context.Context, in *UserInternalParams_SearchNicknameReq, opts ...grpc.CallOption) (*UserInternalParams_SearchNicknameRes, error)
	SubscriptionRelation(ctx context.Context, in *UserInternalParams_SubscriptionRelationReq, opts ...grpc.CallOption) (*UserInternalParams_SubscriptionRelationRes, error)
	// 获取后台 mid 判断登录
	AdminMid(ctx context.Context, in *UserInternalParams_AdminMidReq, opts ...grpc.CallOption) (*UserInternalParams_AdminMidRes, error)
	// 获取后台 manager map
	AdminManagerNameMap(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*UserInternalParams_AdminManagerNameMapRes, error)
	// 检测后台权限
	AdminAuth(ctx context.Context, in *UserInternalParams_AdminAuthReq, opts ...grpc.CallOption) (*UserInternalParams_AdminAuthRes, error)
	// PHP同步用户关系，兼容旧版APP
	Follow(ctx context.Context, in *UserInternalParams_FollowReq, opts ...grpc.CallOption) (*Empty, error)
	// PHP获取我的关注
	Follows(ctx context.Context, in *UserInternalParams_FollowsReq, opts ...grpc.CallOption) (*UserInternalParams_FollowsRes, error)
	// PHP获取我的粉丝
	Fans(ctx context.Context, in *UserInternalParams_Uid, opts ...grpc.CallOption) (*UserInternalParams_BasicUserMap, error)
	// PHP 更新用户缓存
	Sync(ctx context.Context, in *UserInternalParams_UserIds, opts ...grpc.CallOption) (*Empty, error)
	SyncProduct(ctx context.Context, in *UserInternalParams_UserIds, opts ...grpc.CallOption) (*Empty, error)
	SyncLevel(ctx context.Context, in *UserInternalParams_UserIds, opts ...grpc.CallOption) (*Empty, error)
	SyncWordNumber(ctx context.Context, in *UserInternalParams_UserIds, opts ...grpc.CallOption) (*Empty, error)
	SyncBase(ctx context.Context, in *UserInternalParams_UserIds, opts ...grpc.CallOption) (*Empty, error)
	// 设置认证
	SetIdentity(ctx context.Context, in *UserInternalParams_SetIdentityReq, opts ...grpc.CallOption) (*Empty, error)
}

type userInternalClient struct {
	cc grpc.ClientConnInterface
}

func NewUserInternalClient(cc grpc.ClientConnInterface) UserInternalClient {
	return &userInternalClient{cc}
}

func (c *userInternalClient) Uid(ctx context.Context, in *UserInternalParams_Token, opts ...grpc.CallOption) (*UserInternalParams_Uid, error) {
	out := new(UserInternalParams_Uid)
	err := c.cc.Invoke(ctx, "/cp.UserInternal/uid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userInternalClient) Info(ctx context.Context, in *UserInternalParams_Token, opts ...grpc.CallOption) (*UserCommon_InfoUser, error) {
	out := new(UserCommon_InfoUser)
	err := c.cc.Invoke(ctx, "/cp.UserInternal/info", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userInternalClient) InfoFromUid(ctx context.Context, in *UserInternalParams_FromUidReq, opts ...grpc.CallOption) (*UserCommon_InfoUser, error) {
	out := new(UserCommon_InfoUser)
	err := c.cc.Invoke(ctx, "/cp.UserInternal/info_from_uid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userInternalClient) SimpleMap(ctx context.Context, in *UserInternalParams_UserIds, opts ...grpc.CallOption) (*UserInternalParams_SimpleUserMap, error) {
	out := new(UserInternalParams_SimpleUserMap)
	err := c.cc.Invoke(ctx, "/cp.UserInternal/simple_map", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userInternalClient) BasicMap(ctx context.Context, in *UserInternalParams_UserIds, opts ...grpc.CallOption) (*UserInternalParams_BasicUserMap, error) {
	out := new(UserInternalParams_BasicUserMap)
	err := c.cc.Invoke(ctx, "/cp.UserInternal/basic_map", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userInternalClient) BindingInfo(ctx context.Context, in *UserInternalParams_Uid, opts ...grpc.CallOption) (*UserCommon_BindingInfo, error) {
	out := new(UserCommon_BindingInfo)
	err := c.cc.Invoke(ctx, "/cp.UserInternal/binding_info", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userInternalClient) CheckForbidTalk(ctx context.Context, in *UserInternalParams_CheckForbidTalk, opts ...grpc.CallOption) (*BooleanValue, error) {
	out := new(BooleanValue)
	err := c.cc.Invoke(ctx, "/cp.UserInternal/check_forbid_talk", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userInternalClient) SearchNickname(ctx context.Context, in *UserInternalParams_SearchNicknameReq, opts ...grpc.CallOption) (*UserInternalParams_SearchNicknameRes, error) {
	out := new(UserInternalParams_SearchNicknameRes)
	err := c.cc.Invoke(ctx, "/cp.UserInternal/search_nickname", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userInternalClient) SubscriptionRelation(ctx context.Context, in *UserInternalParams_SubscriptionRelationReq, opts ...grpc.CallOption) (*UserInternalParams_SubscriptionRelationRes, error) {
	out := new(UserInternalParams_SubscriptionRelationRes)
	err := c.cc.Invoke(ctx, "/cp.UserInternal/subscription_relation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userInternalClient) AdminMid(ctx context.Context, in *UserInternalParams_AdminMidReq, opts ...grpc.CallOption) (*UserInternalParams_AdminMidRes, error) {
	out := new(UserInternalParams_AdminMidRes)
	err := c.cc.Invoke(ctx, "/cp.UserInternal/admin_mid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userInternalClient) AdminManagerNameMap(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*UserInternalParams_AdminManagerNameMapRes, error) {
	out := new(UserInternalParams_AdminManagerNameMapRes)
	err := c.cc.Invoke(ctx, "/cp.UserInternal/admin_manager_name_map", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userInternalClient) AdminAuth(ctx context.Context, in *UserInternalParams_AdminAuthReq, opts ...grpc.CallOption) (*UserInternalParams_AdminAuthRes, error) {
	out := new(UserInternalParams_AdminAuthRes)
	err := c.cc.Invoke(ctx, "/cp.UserInternal/admin_auth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userInternalClient) Follow(ctx context.Context, in *UserInternalParams_FollowReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/cp.UserInternal/follow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userInternalClient) Follows(ctx context.Context, in *UserInternalParams_FollowsReq, opts ...grpc.CallOption) (*UserInternalParams_FollowsRes, error) {
	out := new(UserInternalParams_FollowsRes)
	err := c.cc.Invoke(ctx, "/cp.UserInternal/follows", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userInternalClient) Fans(ctx context.Context, in *UserInternalParams_Uid, opts ...grpc.CallOption) (*UserInternalParams_BasicUserMap, error) {
	out := new(UserInternalParams_BasicUserMap)
	err := c.cc.Invoke(ctx, "/cp.UserInternal/fans", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userInternalClient) Sync(ctx context.Context, in *UserInternalParams_UserIds, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/cp.UserInternal/sync", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userInternalClient) SyncProduct(ctx context.Context, in *UserInternalParams_UserIds, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/cp.UserInternal/sync_product", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userInternalClient) SyncLevel(ctx context.Context, in *UserInternalParams_UserIds, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/cp.UserInternal/sync_level", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userInternalClient) SyncWordNumber(ctx context.Context, in *UserInternalParams_UserIds, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/cp.UserInternal/sync_word_number", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userInternalClient) SyncBase(ctx context.Context, in *UserInternalParams_UserIds, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/cp.UserInternal/sync_base", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userInternalClient) SetIdentity(ctx context.Context, in *UserInternalParams_SetIdentityReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/cp.UserInternal/set_identity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserInternalServer is the server API for UserInternal service.
// All implementations must embed UnimplementedUserInternalServer
// for forward compatibility
type UserInternalServer interface {
	Uid(context.Context, *UserInternalParams_Token) (*UserInternalParams_Uid, error)
	Info(context.Context, *UserInternalParams_Token) (*UserCommon_InfoUser, error)
	InfoFromUid(context.Context, *UserInternalParams_FromUidReq) (*UserCommon_InfoUser, error)
	SimpleMap(context.Context, *UserInternalParams_UserIds) (*UserInternalParams_SimpleUserMap, error)
	BasicMap(context.Context, *UserInternalParams_UserIds) (*UserInternalParams_BasicUserMap, error)
	BindingInfo(context.Context, *UserInternalParams_Uid) (*UserCommon_BindingInfo, error)
	// 检测是否被禁言
	CheckForbidTalk(context.Context, *UserInternalParams_CheckForbidTalk) (*BooleanValue, error)
	// 昵称搜索，用户后台搜索， limit 100
	SearchNickname(context.Context, *UserInternalParams_SearchNicknameReq) (*UserInternalParams_SearchNicknameRes, error)
	SubscriptionRelation(context.Context, *UserInternalParams_SubscriptionRelationReq) (*UserInternalParams_SubscriptionRelationRes, error)
	// 获取后台 mid 判断登录
	AdminMid(context.Context, *UserInternalParams_AdminMidReq) (*UserInternalParams_AdminMidRes, error)
	// 获取后台 manager map
	AdminManagerNameMap(context.Context, *Empty) (*UserInternalParams_AdminManagerNameMapRes, error)
	// 检测后台权限
	AdminAuth(context.Context, *UserInternalParams_AdminAuthReq) (*UserInternalParams_AdminAuthRes, error)
	// PHP同步用户关系，兼容旧版APP
	Follow(context.Context, *UserInternalParams_FollowReq) (*Empty, error)
	// PHP获取我的关注
	Follows(context.Context, *UserInternalParams_FollowsReq) (*UserInternalParams_FollowsRes, error)
	// PHP获取我的粉丝
	Fans(context.Context, *UserInternalParams_Uid) (*UserInternalParams_BasicUserMap, error)
	// PHP 更新用户缓存
	Sync(context.Context, *UserInternalParams_UserIds) (*Empty, error)
	SyncProduct(context.Context, *UserInternalParams_UserIds) (*Empty, error)
	SyncLevel(context.Context, *UserInternalParams_UserIds) (*Empty, error)
	SyncWordNumber(context.Context, *UserInternalParams_UserIds) (*Empty, error)
	SyncBase(context.Context, *UserInternalParams_UserIds) (*Empty, error)
	// 设置认证
	SetIdentity(context.Context, *UserInternalParams_SetIdentityReq) (*Empty, error)
	mustEmbedUnimplementedUserInternalServer()
}

// UnimplementedUserInternalServer must be embedded to have forward compatible implementations.
type UnimplementedUserInternalServer struct {
}

func (UnimplementedUserInternalServer) Uid(context.Context, *UserInternalParams_Token) (*UserInternalParams_Uid, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Uid not implemented")
}
func (UnimplementedUserInternalServer) Info(context.Context, *UserInternalParams_Token) (*UserCommon_InfoUser, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Info not implemented")
}
func (UnimplementedUserInternalServer) InfoFromUid(context.Context, *UserInternalParams_FromUidReq) (*UserCommon_InfoUser, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InfoFromUid not implemented")
}
func (UnimplementedUserInternalServer) SimpleMap(context.Context, *UserInternalParams_UserIds) (*UserInternalParams_SimpleUserMap, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SimpleMap not implemented")
}
func (UnimplementedUserInternalServer) BasicMap(context.Context, *UserInternalParams_UserIds) (*UserInternalParams_BasicUserMap, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BasicMap not implemented")
}
func (UnimplementedUserInternalServer) BindingInfo(context.Context, *UserInternalParams_Uid) (*UserCommon_BindingInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BindingInfo not implemented")
}
func (UnimplementedUserInternalServer) CheckForbidTalk(context.Context, *UserInternalParams_CheckForbidTalk) (*BooleanValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckForbidTalk not implemented")
}
func (UnimplementedUserInternalServer) SearchNickname(context.Context, *UserInternalParams_SearchNicknameReq) (*UserInternalParams_SearchNicknameRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchNickname not implemented")
}
func (UnimplementedUserInternalServer) SubscriptionRelation(context.Context, *UserInternalParams_SubscriptionRelationReq) (*UserInternalParams_SubscriptionRelationRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubscriptionRelation not implemented")
}
func (UnimplementedUserInternalServer) AdminMid(context.Context, *UserInternalParams_AdminMidReq) (*UserInternalParams_AdminMidRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminMid not implemented")
}
func (UnimplementedUserInternalServer) AdminManagerNameMap(context.Context, *Empty) (*UserInternalParams_AdminManagerNameMapRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminManagerNameMap not implemented")
}
func (UnimplementedUserInternalServer) AdminAuth(context.Context, *UserInternalParams_AdminAuthReq) (*UserInternalParams_AdminAuthRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminAuth not implemented")
}
func (UnimplementedUserInternalServer) Follow(context.Context, *UserInternalParams_FollowReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Follow not implemented")
}
func (UnimplementedUserInternalServer) Follows(context.Context, *UserInternalParams_FollowsReq) (*UserInternalParams_FollowsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Follows not implemented")
}
func (UnimplementedUserInternalServer) Fans(context.Context, *UserInternalParams_Uid) (*UserInternalParams_BasicUserMap, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Fans not implemented")
}
func (UnimplementedUserInternalServer) Sync(context.Context, *UserInternalParams_UserIds) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sync not implemented")
}
func (UnimplementedUserInternalServer) SyncProduct(context.Context, *UserInternalParams_UserIds) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncProduct not implemented")
}
func (UnimplementedUserInternalServer) SyncLevel(context.Context, *UserInternalParams_UserIds) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncLevel not implemented")
}
func (UnimplementedUserInternalServer) SyncWordNumber(context.Context, *UserInternalParams_UserIds) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncWordNumber not implemented")
}
func (UnimplementedUserInternalServer) SyncBase(context.Context, *UserInternalParams_UserIds) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncBase not implemented")
}
func (UnimplementedUserInternalServer) SetIdentity(context.Context, *UserInternalParams_SetIdentityReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetIdentity not implemented")
}
func (UnimplementedUserInternalServer) mustEmbedUnimplementedUserInternalServer() {}

// UnsafeUserInternalServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserInternalServer will
// result in compilation errors.
type UnsafeUserInternalServer interface {
	mustEmbedUnimplementedUserInternalServer()
}

func RegisterUserInternalServer(s grpc.ServiceRegistrar, srv UserInternalServer) {
	s.RegisterService(&UserInternal_ServiceDesc, srv)
}

func _UserInternal_Uid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInternalParams_Token)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserInternalServer).Uid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cp.UserInternal/uid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserInternalServer).Uid(ctx, req.(*UserInternalParams_Token))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserInternal_Info_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInternalParams_Token)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserInternalServer).Info(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cp.UserInternal/info",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserInternalServer).Info(ctx, req.(*UserInternalParams_Token))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserInternal_InfoFromUid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInternalParams_FromUidReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserInternalServer).InfoFromUid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cp.UserInternal/info_from_uid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserInternalServer).InfoFromUid(ctx, req.(*UserInternalParams_FromUidReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserInternal_SimpleMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInternalParams_UserIds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserInternalServer).SimpleMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cp.UserInternal/simple_map",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserInternalServer).SimpleMap(ctx, req.(*UserInternalParams_UserIds))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserInternal_BasicMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInternalParams_UserIds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserInternalServer).BasicMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cp.UserInternal/basic_map",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserInternalServer).BasicMap(ctx, req.(*UserInternalParams_UserIds))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserInternal_BindingInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInternalParams_Uid)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserInternalServer).BindingInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cp.UserInternal/binding_info",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserInternalServer).BindingInfo(ctx, req.(*UserInternalParams_Uid))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserInternal_CheckForbidTalk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInternalParams_CheckForbidTalk)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserInternalServer).CheckForbidTalk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cp.UserInternal/check_forbid_talk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserInternalServer).CheckForbidTalk(ctx, req.(*UserInternalParams_CheckForbidTalk))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserInternal_SearchNickname_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInternalParams_SearchNicknameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserInternalServer).SearchNickname(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cp.UserInternal/search_nickname",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserInternalServer).SearchNickname(ctx, req.(*UserInternalParams_SearchNicknameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserInternal_SubscriptionRelation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInternalParams_SubscriptionRelationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserInternalServer).SubscriptionRelation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cp.UserInternal/subscription_relation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserInternalServer).SubscriptionRelation(ctx, req.(*UserInternalParams_SubscriptionRelationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserInternal_AdminMid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInternalParams_AdminMidReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserInternalServer).AdminMid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cp.UserInternal/admin_mid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserInternalServer).AdminMid(ctx, req.(*UserInternalParams_AdminMidReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserInternal_AdminManagerNameMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserInternalServer).AdminManagerNameMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cp.UserInternal/admin_manager_name_map",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserInternalServer).AdminManagerNameMap(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserInternal_AdminAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInternalParams_AdminAuthReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserInternalServer).AdminAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cp.UserInternal/admin_auth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserInternalServer).AdminAuth(ctx, req.(*UserInternalParams_AdminAuthReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserInternal_Follow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInternalParams_FollowReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserInternalServer).Follow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cp.UserInternal/follow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserInternalServer).Follow(ctx, req.(*UserInternalParams_FollowReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserInternal_Follows_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInternalParams_FollowsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserInternalServer).Follows(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cp.UserInternal/follows",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserInternalServer).Follows(ctx, req.(*UserInternalParams_FollowsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserInternal_Fans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInternalParams_Uid)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserInternalServer).Fans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cp.UserInternal/fans",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserInternalServer).Fans(ctx, req.(*UserInternalParams_Uid))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserInternal_Sync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInternalParams_UserIds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserInternalServer).Sync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cp.UserInternal/sync",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserInternalServer).Sync(ctx, req.(*UserInternalParams_UserIds))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserInternal_SyncProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInternalParams_UserIds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserInternalServer).SyncProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cp.UserInternal/sync_product",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserInternalServer).SyncProduct(ctx, req.(*UserInternalParams_UserIds))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserInternal_SyncLevel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInternalParams_UserIds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserInternalServer).SyncLevel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cp.UserInternal/sync_level",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserInternalServer).SyncLevel(ctx, req.(*UserInternalParams_UserIds))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserInternal_SyncWordNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInternalParams_UserIds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserInternalServer).SyncWordNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cp.UserInternal/sync_word_number",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserInternalServer).SyncWordNumber(ctx, req.(*UserInternalParams_UserIds))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserInternal_SyncBase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInternalParams_UserIds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserInternalServer).SyncBase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cp.UserInternal/sync_base",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserInternalServer).SyncBase(ctx, req.(*UserInternalParams_UserIds))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserInternal_SetIdentity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInternalParams_SetIdentityReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserInternalServer).SetIdentity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cp.UserInternal/set_identity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserInternalServer).SetIdentity(ctx, req.(*UserInternalParams_SetIdentityReq))
	}
	return interceptor(ctx, in, info, handler)
}

// UserInternal_ServiceDesc is the grpc.ServiceDesc for UserInternal service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserInternal_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cp.UserInternal",
	HandlerType: (*UserInternalServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "uid",
			Handler:    _UserInternal_Uid_Handler,
		},
		{
			MethodName: "info",
			Handler:    _UserInternal_Info_Handler,
		},
		{
			MethodName: "info_from_uid",
			Handler:    _UserInternal_InfoFromUid_Handler,
		},
		{
			MethodName: "simple_map",
			Handler:    _UserInternal_SimpleMap_Handler,
		},
		{
			MethodName: "basic_map",
			Handler:    _UserInternal_BasicMap_Handler,
		},
		{
			MethodName: "binding_info",
			Handler:    _UserInternal_BindingInfo_Handler,
		},
		{
			MethodName: "check_forbid_talk",
			Handler:    _UserInternal_CheckForbidTalk_Handler,
		},
		{
			MethodName: "search_nickname",
			Handler:    _UserInternal_SearchNickname_Handler,
		},
		{
			MethodName: "subscription_relation",
			Handler:    _UserInternal_SubscriptionRelation_Handler,
		},
		{
			MethodName: "admin_mid",
			Handler:    _UserInternal_AdminMid_Handler,
		},
		{
			MethodName: "admin_manager_name_map",
			Handler:    _UserInternal_AdminManagerNameMap_Handler,
		},
		{
			MethodName: "admin_auth",
			Handler:    _UserInternal_AdminAuth_Handler,
		},
		{
			MethodName: "follow",
			Handler:    _UserInternal_Follow_Handler,
		},
		{
			MethodName: "follows",
			Handler:    _UserInternal_Follows_Handler,
		},
		{
			MethodName: "fans",
			Handler:    _UserInternal_Fans_Handler,
		},
		{
			MethodName: "sync",
			Handler:    _UserInternal_Sync_Handler,
		},
		{
			MethodName: "sync_product",
			Handler:    _UserInternal_SyncProduct_Handler,
		},
		{
			MethodName: "sync_level",
			Handler:    _UserInternal_SyncLevel_Handler,
		},
		{
			MethodName: "sync_word_number",
			Handler:    _UserInternal_SyncWordNumber_Handler,
		},
		{
			MethodName: "sync_base",
			Handler:    _UserInternal_SyncBase_Handler,
		},
		{
			MethodName: "set_identity",
			Handler:    _UserInternal_SetIdentity_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cp_user_internal.proto",
}
