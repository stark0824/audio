// Code generated by goctl. DO NOT EDIT.

package recommend

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	recPositionFieldNames          = builder.RawFieldNames(&RecPosition{})
	recPositionRows                = strings.Join(recPositionFieldNames, ",")
	recPositionRowsExpectAutoSet   = strings.Join(stringx.Remove(recPositionFieldNames, "`id`", ), ",")
	recPositionRowsWithPlaceHolder = strings.Join(stringx.Remove(recPositionFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheCpAudioRecPositionIdPrefix = "cache:cpAudio:recPosition:id:"
)

type (
	recPositionModel interface {
		Insert(ctx context.Context, data *RecPosition) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*RecPosition, error)
		Update(ctx context.Context, data *RecPosition) error
		Delete(ctx context.Context, id int64) error
	}

	defaultRecPositionModel struct {
		sqlc.CachedConn
		table string
	}

	RecPosition struct {
		Id        int64  `db:"id"`
		Name      string `db:"name"`       // 标题
		TempType  int64  `db:"temp_type"`  // 模板类型 1:单排,2:横排,3:竖排
		Sort      int64  `db:"sort"`       // 排序
		NovelIds  string `db:"novel_ids"`  // 作品id集合: | 分隔
		IsDel     int64  `db:"is_del"`     // 0未删除 1已删除
		CreatedAt int64  `db:"created_at"` // 创建时间
		UpdatedAt int64  `db:"updated_at"` // 更新时间
	}
)

func newRecPositionModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultRecPositionModel {
	return &defaultRecPositionModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`rec_position`",
	}
}

func (m *defaultRecPositionModel) Delete(ctx context.Context, id int64) error {
	cpAudioRecPositionIdKey := fmt.Sprintf("%s%v", cacheCpAudioRecPositionIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, cpAudioRecPositionIdKey)
	return err
}

func (m *defaultRecPositionModel) FindOne(ctx context.Context, id int64) (*RecPosition, error) {
	cpAudioRecPositionIdKey := fmt.Sprintf("%s%v", cacheCpAudioRecPositionIdPrefix, id)
	var resp RecPosition
	err := m.QueryRowCtx(ctx, &resp, cpAudioRecPositionIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", recPositionRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultRecPositionModel) Insert(ctx context.Context, data *RecPosition) (sql.Result, error) {
	cpAudioRecPositionIdKey := fmt.Sprintf("%s%v", cacheCpAudioRecPositionIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?,?,?)", m.table, recPositionRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Name, data.TempType, data.Sort, data.NovelIds, data.IsDel,data.CreatedAt,data.UpdatedAt)
	}, cpAudioRecPositionIdKey)
	return ret, err
}

func (m *defaultRecPositionModel) Update(ctx context.Context, data *RecPosition) error {
	cpAudioRecPositionIdKey := fmt.Sprintf("%s%v", cacheCpAudioRecPositionIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, recPositionRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.Name, data.TempType, data.Sort, data.NovelIds, data.IsDel, data.Id)
	}, cpAudioRecPositionIdKey)
	return err
}

func (m *defaultRecPositionModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheCpAudioRecPositionIdPrefix, primary)
}

func (m *defaultRecPositionModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", recPositionRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultRecPositionModel) tableName() string {
	return m.table
}