// Code generated by goctl. DO NOT EDIT.

package drama

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	dramaFieldNames          = builder.RawFieldNames(&Drama{})
	dramaRows                = strings.Join(dramaFieldNames, ",")
	dramaRowsExpectAutoSet   = strings.Join(stringx.Remove(dramaFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	dramaRowsWithPlaceHolder = strings.Join(stringx.Remove(dramaFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheCpAudioDramaIdPrefix = "cache:cpAudio:drama:id:"
)

type (
	dramaModel interface {
		Insert(ctx context.Context, data *Drama) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Drama, error)
		Update(ctx context.Context, data *Drama) error
		Delete(ctx context.Context, id int64) error
	}

	defaultDramaModel struct {
		sqlc.CachedConn
		table string
	}

	Drama struct {
		Id                  int64  `json:"id" db:"id"`
		Name                string `json:"name" db:"name"`
		Author              string `json:"author" db:"author"`
		Nid                 int64  `json:"nid" db:"nid"`               // 关联小说id
		CatalogId           int64  `json:"catalog_id" db:"catalog_id"` // 1 广播剧 2 有声书
		Status              int64  `json:"status" db:"status"`         // 作品展示状态 1 正常 2 下架 3 屏蔽
		Process             int64  ` json:"process" db:"process"`      // 1 连载 2 完结
		Cover               string `json:"cover" db:"cover"`
		ShortIntro          string `json:"short_intro" db:"short_intro"`
		Intro               string `json:"intro" db:"intro"`
		Category            int64  `json:"category" db:"category"`       // 分类
		ProducerId          int64  `json:"producer_id" db:"producer_id"` // 工作室id
		ProducerName        string `json:"producer_name" db:"producer_name"`
		LatestUptime        int64  `json:"latest_uptime" db:"latest_uptime"`       // 最新音频更新时间
		LatestSound         string `json:"latest_sound" db:"latest_sound"`         // 最新音频
		LatestSid           int64  `json:"latest_sid" db:"latest_sid"`             // 最新音频id
		IsPay               int64  `json:"is_pay" db:"is_pay"`                     // 是否付费 1 付费
		PayIndex            int64  `json:"pay_index" db:"pay_index"`               // 入v起始章节序号
		Price               int64  `json:"price" db:"price"`                       // 入v单集价格玉佩
		TotalPrice          int64  `json:"total_price" db:"total_price"`           // 打包总价格
		ServerDivided       int64  `json:"server_divided" db:"server_divided"`     // 平台运营成本
		ProducerDivided     int64  `json:"producer_divided" db:"producer_divided"` // 工作室分成 最大100
		DiscountAll         int64  `json:"discount_all" db:"discount_all"`         // 全集折扣 最大100不打折
		DiscountAllStime    int64  `json:"discount_all_stime" db:"discount_all_stime"`
		DiscountAllEtime    int64  `json:"discount_all_etime" db:"discount_all_etime"`
		DiscountSingle      int64  `json:"discount_single" db:"discount_single"` // 单集折扣 最大100不打折
		DiscountSingleStime int64  `json:"discount_single_stime" db:"discount_single_stime"`
		DiscountSingleEtime int64  `json:"discount_single_etime" db:"discount_single_etime"`
		SoundNum            int64  `json:"sound_num" db:"sound_num"`     // 音频数
		SoundTotal          int64  `json:"sound_total" db:"sound_total"` // 音频总数 包含定时发布的音频
		Click               int64  `json:"click" db:"click"`
		Followers           int64  `json:"followers" db:"followers"` // 收藏数
		CommentNum          int64  `json:"comment_num" db:"comment_num"`
		LcommentNum         int64  `json:"lcomment_num" db:"lcomment_num"` // 长评数
		UpdatedAt           int64  `json:"updated_at" db:"updated_at"`
		CreatedAt           int64  `json:"created_at" db:"created_at"`
	}
)

func newDramaModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultDramaModel {
	return &defaultDramaModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`drama`",
	}
}

func (m *defaultDramaModel) Delete(ctx context.Context, id int64) error {
	cpAudioDramaIdKey := fmt.Sprintf("%s%v", cacheCpAudioDramaIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, cpAudioDramaIdKey)
	return err
}

func (m *defaultDramaModel) FindOne(ctx context.Context, id int64) (*Drama, error) {
	cpAudioDramaIdKey := fmt.Sprintf("%s%v", cacheCpAudioDramaIdPrefix, id)
	var resp Drama
	err := m.QueryRowCtx(ctx, &resp, cpAudioDramaIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", dramaRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultDramaModel) Insert(ctx context.Context, data *Drama) (sql.Result, error) {
	cpAudioDramaIdKey := fmt.Sprintf("%s%v", cacheCpAudioDramaIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, dramaRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Name, data.Author, data.Nid, data.CatalogId, data.Status, data.Process, data.Cover, data.ShortIntro, data.Intro, data.Category, data.ProducerId, data.ProducerName, data.LatestUptime, data.LatestSound, data.LatestSid, data.IsPay, data.PayIndex, data.Price, data.TotalPrice, data.ServerDivided, data.ProducerDivided, data.DiscountAll, data.DiscountAllStime, data.DiscountAllEtime, data.DiscountSingle, data.DiscountSingleStime, data.DiscountSingleEtime, data.SoundNum, data.SoundTotal, data.Click, data.Followers, data.CommentNum, data.LcommentNum)
	}, cpAudioDramaIdKey)
	return ret, err
}

func (m *defaultDramaModel) Update(ctx context.Context, data *Drama) error {
	cpAudioDramaIdKey := fmt.Sprintf("%s%v", cacheCpAudioDramaIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, dramaRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.Name, data.Author, data.Nid, data.CatalogId, data.Status, data.Process, data.Cover, data.ShortIntro, data.Intro, data.Category, data.ProducerId, data.ProducerName, data.LatestUptime, data.LatestSound, data.LatestSid, data.IsPay, data.PayIndex, data.Price, data.TotalPrice, data.ServerDivided, data.ProducerDivided, data.DiscountAll, data.DiscountAllStime, data.DiscountAllEtime, data.DiscountSingle, data.DiscountSingleStime, data.DiscountSingleEtime, data.SoundNum, data.SoundTotal, data.Click, data.Followers, data.CommentNum, data.LcommentNum, data.Id)
	}, cpAudioDramaIdKey)
	return err
}

func (m *defaultDramaModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheCpAudioDramaIdPrefix, primary)
}

func (m *defaultDramaModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", dramaRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultDramaModel) tableName() string {
	return m.table
}
