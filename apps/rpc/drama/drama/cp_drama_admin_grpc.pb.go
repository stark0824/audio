// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: cp_drama_admin.proto

package drama

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DramaClient is the client API for Drama service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DramaClient interface {
	// 后台-有声作品详情
	DramaInfo(ctx context.Context, in *DramaInfoReq, opts ...grpc.CallOption) (*DramaInfoResp, error)
	// 后台 - 全部工作室列表
	ProducerList(ctx context.Context, in *ProducerAllReq, opts ...grpc.CallOption) (*ProducerAllResp, error)
	ProducerDict(ctx context.Context, in *Req, opts ...grpc.CallOption) (*ProducerDictResp, error)
	ProducerEdit(ctx context.Context, in *ProducerEditReq, opts ...grpc.CallOption) (*ProducerEditResp, error)
	// 后台 - 有声推荐列表
	RecPositionList(ctx context.Context, in *RecPositionReq, opts ...grpc.CallOption) (*RecPositionResp, error)
	RecPositionAdd(ctx context.Context, in *RecPositionAddReq, opts ...grpc.CallOption) (*RecPositionOpsResp, error)
	RecPositionEdit(ctx context.Context, in *RecPositionDataReq, opts ...grpc.CallOption) (*RecPositionOpsResp, error)
	RecPositionDel(ctx context.Context, in *RecPositionOpsReq, opts ...grpc.CallOption) (*RecPositionOpsResp, error)
	// 公共部分
	DramaShortList(ctx context.Context, in *DramaShortListReq, opts ...grpc.CallOption) (*DramaShortListResp, error)
	UserCollDrama(ctx context.Context, in *CollDramaReq, opts ...grpc.CallOption) (*Resp, error)
	CheckUserCollDrama(ctx context.Context, in *CheckCollDramaReq, opts ...grpc.CallOption) (*CheckCollDramaResp, error)
}

type dramaClient struct {
	cc grpc.ClientConnInterface
}

func NewDramaClient(cc grpc.ClientConnInterface) DramaClient {
	return &dramaClient{cc}
}

func (c *dramaClient) DramaInfo(ctx context.Context, in *DramaInfoReq, opts ...grpc.CallOption) (*DramaInfoResp, error) {
	out := new(DramaInfoResp)
	err := c.cc.Invoke(ctx, "/cp.Drama/DramaInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dramaClient) ProducerList(ctx context.Context, in *ProducerAllReq, opts ...grpc.CallOption) (*ProducerAllResp, error) {
	out := new(ProducerAllResp)
	err := c.cc.Invoke(ctx, "/cp.Drama/ProducerList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dramaClient) ProducerDict(ctx context.Context, in *Req, opts ...grpc.CallOption) (*ProducerDictResp, error) {
	out := new(ProducerDictResp)
	err := c.cc.Invoke(ctx, "/cp.Drama/ProducerDict", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dramaClient) ProducerEdit(ctx context.Context, in *ProducerEditReq, opts ...grpc.CallOption) (*ProducerEditResp, error) {
	out := new(ProducerEditResp)
	err := c.cc.Invoke(ctx, "/cp.Drama/ProducerEdit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dramaClient) RecPositionList(ctx context.Context, in *RecPositionReq, opts ...grpc.CallOption) (*RecPositionResp, error) {
	out := new(RecPositionResp)
	err := c.cc.Invoke(ctx, "/cp.Drama/RecPositionList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dramaClient) RecPositionAdd(ctx context.Context, in *RecPositionAddReq, opts ...grpc.CallOption) (*RecPositionOpsResp, error) {
	out := new(RecPositionOpsResp)
	err := c.cc.Invoke(ctx, "/cp.Drama/RecPositionAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dramaClient) RecPositionEdit(ctx context.Context, in *RecPositionDataReq, opts ...grpc.CallOption) (*RecPositionOpsResp, error) {
	out := new(RecPositionOpsResp)
	err := c.cc.Invoke(ctx, "/cp.Drama/RecPositionEdit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dramaClient) RecPositionDel(ctx context.Context, in *RecPositionOpsReq, opts ...grpc.CallOption) (*RecPositionOpsResp, error) {
	out := new(RecPositionOpsResp)
	err := c.cc.Invoke(ctx, "/cp.Drama/RecPositionDel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dramaClient) DramaShortList(ctx context.Context, in *DramaShortListReq, opts ...grpc.CallOption) (*DramaShortListResp, error) {
	out := new(DramaShortListResp)
	err := c.cc.Invoke(ctx, "/cp.Drama/DramaShortList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dramaClient) UserCollDrama(ctx context.Context, in *CollDramaReq, opts ...grpc.CallOption) (*Resp, error) {
	out := new(Resp)
	err := c.cc.Invoke(ctx, "/cp.Drama/UserCollDrama", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dramaClient) CheckUserCollDrama(ctx context.Context, in *CheckCollDramaReq, opts ...grpc.CallOption) (*CheckCollDramaResp, error) {
	out := new(CheckCollDramaResp)
	err := c.cc.Invoke(ctx, "/cp.Drama/CheckUserCollDrama", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DramaServer is the server API for Drama service.
// All implementations must embed UnimplementedDramaServer
// for forward compatibility
type DramaServer interface {
	// 后台-有声作品详情
	DramaInfo(context.Context, *DramaInfoReq) (*DramaInfoResp, error)
	// 后台 - 全部工作室列表
	ProducerList(context.Context, *ProducerAllReq) (*ProducerAllResp, error)
	ProducerDict(context.Context, *Req) (*ProducerDictResp, error)
	ProducerEdit(context.Context, *ProducerEditReq) (*ProducerEditResp, error)
	// 后台 - 有声推荐列表
	RecPositionList(context.Context, *RecPositionReq) (*RecPositionResp, error)
	RecPositionAdd(context.Context, *RecPositionAddReq) (*RecPositionOpsResp, error)
	RecPositionEdit(context.Context, *RecPositionDataReq) (*RecPositionOpsResp, error)
	RecPositionDel(context.Context, *RecPositionOpsReq) (*RecPositionOpsResp, error)
	// 公共部分
	DramaShortList(context.Context, *DramaShortListReq) (*DramaShortListResp, error)
	UserCollDrama(context.Context, *CollDramaReq) (*Resp, error)
	CheckUserCollDrama(context.Context, *CheckCollDramaReq) (*CheckCollDramaResp, error)
	mustEmbedUnimplementedDramaServer()
}

// UnimplementedDramaServer must be embedded to have forward compatible implementations.
type UnimplementedDramaServer struct {
}

func (UnimplementedDramaServer) DramaInfo(context.Context, *DramaInfoReq) (*DramaInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DramaInfo not implemented")
}
func (UnimplementedDramaServer) ProducerList(context.Context, *ProducerAllReq) (*ProducerAllResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProducerList not implemented")
}
func (UnimplementedDramaServer) ProducerDict(context.Context, *Req) (*ProducerDictResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProducerDict not implemented")
}
func (UnimplementedDramaServer) ProducerEdit(context.Context, *ProducerEditReq) (*ProducerEditResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProducerEdit not implemented")
}
func (UnimplementedDramaServer) RecPositionList(context.Context, *RecPositionReq) (*RecPositionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecPositionList not implemented")
}
func (UnimplementedDramaServer) RecPositionAdd(context.Context, *RecPositionAddReq) (*RecPositionOpsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecPositionAdd not implemented")
}
func (UnimplementedDramaServer) RecPositionEdit(context.Context, *RecPositionDataReq) (*RecPositionOpsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecPositionEdit not implemented")
}
func (UnimplementedDramaServer) RecPositionDel(context.Context, *RecPositionOpsReq) (*RecPositionOpsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecPositionDel not implemented")
}
func (UnimplementedDramaServer) DramaShortList(context.Context, *DramaShortListReq) (*DramaShortListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DramaShortList not implemented")
}
func (UnimplementedDramaServer) UserCollDrama(context.Context, *CollDramaReq) (*Resp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserCollDrama not implemented")
}
func (UnimplementedDramaServer) CheckUserCollDrama(context.Context, *CheckCollDramaReq) (*CheckCollDramaResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckUserCollDrama not implemented")
}
func (UnimplementedDramaServer) mustEmbedUnimplementedDramaServer() {}

// UnsafeDramaServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DramaServer will
// result in compilation errors.
type UnsafeDramaServer interface {
	mustEmbedUnimplementedDramaServer()
}

func RegisterDramaServer(s grpc.ServiceRegistrar, srv DramaServer) {
	s.RegisterService(&Drama_ServiceDesc, srv)
}

func _Drama_DramaInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DramaInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DramaServer).DramaInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cp.Drama/DramaInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DramaServer).DramaInfo(ctx, req.(*DramaInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Drama_ProducerList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProducerAllReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DramaServer).ProducerList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cp.Drama/ProducerList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DramaServer).ProducerList(ctx, req.(*ProducerAllReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Drama_ProducerDict_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DramaServer).ProducerDict(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cp.Drama/ProducerDict",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DramaServer).ProducerDict(ctx, req.(*Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _Drama_ProducerEdit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProducerEditReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DramaServer).ProducerEdit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cp.Drama/ProducerEdit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DramaServer).ProducerEdit(ctx, req.(*ProducerEditReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Drama_RecPositionList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecPositionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DramaServer).RecPositionList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cp.Drama/RecPositionList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DramaServer).RecPositionList(ctx, req.(*RecPositionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Drama_RecPositionAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecPositionAddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DramaServer).RecPositionAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cp.Drama/RecPositionAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DramaServer).RecPositionAdd(ctx, req.(*RecPositionAddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Drama_RecPositionEdit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecPositionDataReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DramaServer).RecPositionEdit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cp.Drama/RecPositionEdit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DramaServer).RecPositionEdit(ctx, req.(*RecPositionDataReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Drama_RecPositionDel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecPositionOpsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DramaServer).RecPositionDel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cp.Drama/RecPositionDel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DramaServer).RecPositionDel(ctx, req.(*RecPositionOpsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Drama_DramaShortList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DramaShortListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DramaServer).DramaShortList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cp.Drama/DramaShortList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DramaServer).DramaShortList(ctx, req.(*DramaShortListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Drama_UserCollDrama_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollDramaReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DramaServer).UserCollDrama(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cp.Drama/UserCollDrama",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DramaServer).UserCollDrama(ctx, req.(*CollDramaReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Drama_CheckUserCollDrama_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckCollDramaReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DramaServer).CheckUserCollDrama(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cp.Drama/CheckUserCollDrama",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DramaServer).CheckUserCollDrama(ctx, req.(*CheckCollDramaReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Drama_ServiceDesc is the grpc.ServiceDesc for Drama service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Drama_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cp.Drama",
	HandlerType: (*DramaServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DramaInfo",
			Handler:    _Drama_DramaInfo_Handler,
		},
		{
			MethodName: "ProducerList",
			Handler:    _Drama_ProducerList_Handler,
		},
		{
			MethodName: "ProducerDict",
			Handler:    _Drama_ProducerDict_Handler,
		},
		{
			MethodName: "ProducerEdit",
			Handler:    _Drama_ProducerEdit_Handler,
		},
		{
			MethodName: "RecPositionList",
			Handler:    _Drama_RecPositionList_Handler,
		},
		{
			MethodName: "RecPositionAdd",
			Handler:    _Drama_RecPositionAdd_Handler,
		},
		{
			MethodName: "RecPositionEdit",
			Handler:    _Drama_RecPositionEdit_Handler,
		},
		{
			MethodName: "RecPositionDel",
			Handler:    _Drama_RecPositionDel_Handler,
		},
		{
			MethodName: "DramaShortList",
			Handler:    _Drama_DramaShortList_Handler,
		},
		{
			MethodName: "UserCollDrama",
			Handler:    _Drama_UserCollDrama_Handler,
		},
		{
			MethodName: "CheckUserCollDrama",
			Handler:    _Drama_CheckUserCollDrama_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cp_drama_admin.proto",
}
