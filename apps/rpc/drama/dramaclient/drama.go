// Code generated by goctl. DO NOT EDIT.
// Source: cp_drama_admin.proto

package dramaclient

import (
	"context"

	"audio/apps/rpc/drama/drama"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	CheckCollDramaReq  = drama.CheckCollDramaReq
	CheckCollDramaResp = drama.CheckCollDramaResp
	CollDramaReq       = drama.CollDramaReq
	DramaInfo          = drama.DramaInfo
	DramaInfoReq       = drama.DramaInfoReq
	DramaInfoResp      = drama.DramaInfoResp
	DramaShort         = drama.DramaShort
	DramaShortListReq  = drama.DramaShortListReq
	DramaShortListResp = drama.DramaShortListResp
	Producer           = drama.Producer
	ProducerAllReq     = drama.ProducerAllReq
	ProducerAllResp    = drama.ProducerAllResp
	ProducerDict       = drama.ProducerDict
	ProducerDictResp   = drama.ProducerDictResp
	ProducerEditReq    = drama.ProducerEditReq
	ProducerEditResp   = drama.ProducerEditResp
	RecPosition        = drama.RecPosition
	RecPositionAddReq  = drama.RecPositionAddReq
	RecPositionDataReq = drama.RecPositionDataReq
	RecPositionOpsReq  = drama.RecPositionOpsReq
	RecPositionOpsResp = drama.RecPositionOpsResp
	RecPositionReq     = drama.RecPositionReq
	RecPositionResp    = drama.RecPositionResp
	Req                = drama.Req
	Resp               = drama.Resp

	Drama interface {
		// 后台-有声作品详情
		DramaInfo(ctx context.Context, in *DramaInfoReq, opts ...grpc.CallOption) (*DramaInfoResp, error)
		// 后台 - 全部工作室列表
		ProducerList(ctx context.Context, in *ProducerAllReq, opts ...grpc.CallOption) (*ProducerAllResp, error)
		ProducerDict(ctx context.Context, in *Req, opts ...grpc.CallOption) (*ProducerDictResp, error)
		ProducerEdit(ctx context.Context, in *ProducerEditReq, opts ...grpc.CallOption) (*ProducerEditResp, error)
		// 后台 - 有声推荐列表
		RecPositionList(ctx context.Context, in *RecPositionReq, opts ...grpc.CallOption) (*RecPositionResp, error)
		RecPositionAdd(ctx context.Context, in *RecPositionAddReq, opts ...grpc.CallOption) (*RecPositionOpsResp, error)
		RecPositionEdit(ctx context.Context, in *RecPositionDataReq, opts ...grpc.CallOption) (*RecPositionOpsResp, error)
		RecPositionDel(ctx context.Context, in *RecPositionOpsReq, opts ...grpc.CallOption) (*RecPositionOpsResp, error)
		// 公共部分
		DramaShortList(ctx context.Context, in *DramaShortListReq, opts ...grpc.CallOption) (*DramaShortListResp, error)
		UserCollDrama(ctx context.Context, in *CollDramaReq, opts ...grpc.CallOption) (*Resp, error)
		CheckUserCollDrama(ctx context.Context, in *CheckCollDramaReq, opts ...grpc.CallOption) (*CheckCollDramaResp, error)
	}

	defaultDrama struct {
		cli zrpc.Client
	}
)

func NewDrama(cli zrpc.Client) Drama {
	return &defaultDrama{
		cli: cli,
	}
}

// 后台-有声作品详情
func (m *defaultDrama) DramaInfo(ctx context.Context, in *DramaInfoReq, opts ...grpc.CallOption) (*DramaInfoResp, error) {
	client := drama.NewDramaClient(m.cli.Conn())
	return client.DramaInfo(ctx, in, opts...)
}

// 后台 - 全部工作室列表
func (m *defaultDrama) ProducerList(ctx context.Context, in *ProducerAllReq, opts ...grpc.CallOption) (*ProducerAllResp, error) {
	client := drama.NewDramaClient(m.cli.Conn())
	return client.ProducerList(ctx, in, opts...)
}

func (m *defaultDrama) ProducerDict(ctx context.Context, in *Req, opts ...grpc.CallOption) (*ProducerDictResp, error) {
	client := drama.NewDramaClient(m.cli.Conn())
	return client.ProducerDict(ctx, in, opts...)
}

func (m *defaultDrama) ProducerEdit(ctx context.Context, in *ProducerEditReq, opts ...grpc.CallOption) (*ProducerEditResp, error) {
	client := drama.NewDramaClient(m.cli.Conn())
	return client.ProducerEdit(ctx, in, opts...)
}

// 后台 - 有声推荐列表
func (m *defaultDrama) RecPositionList(ctx context.Context, in *RecPositionReq, opts ...grpc.CallOption) (*RecPositionResp, error) {
	client := drama.NewDramaClient(m.cli.Conn())
	return client.RecPositionList(ctx, in, opts...)
}

func (m *defaultDrama) RecPositionAdd(ctx context.Context, in *RecPositionAddReq, opts ...grpc.CallOption) (*RecPositionOpsResp, error) {
	client := drama.NewDramaClient(m.cli.Conn())
	return client.RecPositionAdd(ctx, in, opts...)
}

func (m *defaultDrama) RecPositionEdit(ctx context.Context, in *RecPositionDataReq, opts ...grpc.CallOption) (*RecPositionOpsResp, error) {
	client := drama.NewDramaClient(m.cli.Conn())
	return client.RecPositionEdit(ctx, in, opts...)
}

func (m *defaultDrama) RecPositionDel(ctx context.Context, in *RecPositionOpsReq, opts ...grpc.CallOption) (*RecPositionOpsResp, error) {
	client := drama.NewDramaClient(m.cli.Conn())
	return client.RecPositionDel(ctx, in, opts...)
}

// 公共部分
func (m *defaultDrama) DramaShortList(ctx context.Context, in *DramaShortListReq, opts ...grpc.CallOption) (*DramaShortListResp, error) {
	client := drama.NewDramaClient(m.cli.Conn())
	return client.DramaShortList(ctx, in, opts...)
}

func (m *defaultDrama) UserCollDrama(ctx context.Context, in *CollDramaReq, opts ...grpc.CallOption) (*Resp, error) {
	client := drama.NewDramaClient(m.cli.Conn())
	return client.UserCollDrama(ctx, in, opts...)
}

func (m *defaultDrama) CheckUserCollDrama(ctx context.Context, in *CheckCollDramaReq, opts ...grpc.CallOption) (*CheckCollDramaResp, error) {
	client := drama.NewDramaClient(m.cli.Conn())
	return client.CheckUserCollDrama(ctx, in, opts...)
}
